{"version":3,"sources":["components/card/card-component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","users","json","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAceA,EAXF,SAACC,GAEV,OACI,sBAAKC,UAAY,iBAAjB,UACI,qBAAKC,IAAM,UAAUC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,4BACxB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCKfC,G,MATE,SAACR,GACd,OACI,qBAAKC,UAAY,YAAjB,SACID,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAI,cAAC,EAAD,CAAyBA,QAASA,GAArBA,EAAQC,WCNlDM,EAAY,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAYC,EAAkB,EAAlBA,aAEnC,OACI,uBAAOZ,UAAY,SAASa,KAAO,SAASF,YAAeA,EAAaG,SAAUF,KCsC3EG,E,kDArCb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAK,OAAIA,EAAMC,UACpBF,MAAK,SAAAC,GAAK,OAAI,EAAKE,SAAS,CAAEd,SAAUY,S,oBAG7C,WAAU,IAAD,OAEP,EAAkCG,KAAKP,MAA/BR,EAAR,EAAQA,SAAUS,EAAlB,EAAkBA,YACZO,EAAmBhB,EAASiB,QAAO,SAAAtB,GAAO,OAC9CA,EAAQE,KAAKqB,cAAcC,SAASV,EAAYS,kBAGlD,OACE,sBAAK1B,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aACvC,SAAAgB,GAAC,OAAI,EAAKN,SAAS,CAAEL,YAAaW,EAAEC,OAAOC,WAC7C,cAAC,EAAD,CAAUtB,SAAUgB,W,GA7BVO,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4950583f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nconst Card = (props) =>{\r\n\r\n    return(\r\n        <div className = \"card-container\">\r\n            <img alt = 'monster' src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n            <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import { className } from 'postcss-selector-parser';\r\nimport React from 'react';\r\nimport Card from '../card/card-component'\r\nimport './card-list.styles.css'\r\n\r\nconst CardList = (props) =>{\r\n    return(\r\n        <div className = \"card-list\">\r\n           {props.monsters.map(monster => <Card key = {monster.id} monster={monster}/>)}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default CardList;","import {React} from 'react';\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) => {\r\n\r\n    return(\r\n        <input className = 'search' type = 'search' placeholder = {placeholder} onChange={handleChange}></input>\r\n    )\r\n\r\n}","import './App.css';\nimport { React, Component } from 'react';\nimport CardList from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component';\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(users => users.json())\n      .then(users => this.setState({ monsters: users }))\n  }\n\n  render() {\n\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monster's Rolodex</h1>\n        <SearchBox placeholder='search monsters' handleChange={\n          e => this.setState({ searchField: e.target.value })} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n      // <header className=\"App-header\">\n\n      // </header>\n\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}